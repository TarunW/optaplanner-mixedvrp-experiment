/*
 * Copyright 2012 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.vehiclerouting.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.vehiclerouting.domain.Depot;
import org.optaplanner.examples.vehiclerouting.domain.location.Location;
import org.optaplanner.examples.vehiclerouting.domain.Vehicle;
import org.optaplanner.examples.vehiclerouting.domain.VehicleRoutingSolution;
import org.optaplanner.examples.vehiclerouting.domain.Shipment
import org.optaplanner.examples.vehiclerouting.domain.Visit;
import org.optaplanner.examples.vehiclerouting.domain.VisitType;
import org.optaplanner.examples.vehiclerouting.domain.timewindowed.TimeWindowedDepot;
import org.optaplanner.examples.vehiclerouting.domain.timewindowed.TimeWindowedVehicleRoutingSolution;
import org.optaplanner.examples.vehiclerouting.domain.timewindowed.TimeWindowedVisit
import org.optaplanner.examples.vehiclerouting.domain.Vehicle;

// ############################################################################
// The bad way? of enforcing delivery after pickup, through rules
// ############################################################################

rule "pickupAndDeliveryBySameVehicle"
    when
        Visit(visitType == VisitType.PICKUP, $shipment : shipment, $vehicle : vehicle)
        Visit(shipment == $shipment, visitType == VisitType.DELIVERY, vehicle != $vehicle)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $shipment.getSize() * 10);
end

rule "pickupBeforeDelivery"
    when
        Visit(visitType == VisitType.PICKUP, $shipment : shipment, $vehicle : vehicle, $pickupVisitIndex : visitIndex)
        Visit(shipment == $shipment, visitType == VisitType.DELIVERY, vehicle == $vehicle, visitIndex < $pickupVisitIndex, $deliveryVisitIndex : visitIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - ($pickupVisitIndex - $deliveryVisitIndex));
end
